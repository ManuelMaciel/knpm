import fs from 'fs-extra';
import yaml from 'js-yaml';
import { NAME } from './constant';
import { Manifest } from './resolve';
import { sortKeys } from './utils';

/**
 * Lock tree to keep track of dependencies (e.g. yarn.lock)
 */
export type Lock = {
  [index: string]: LockInfo;
};

type LockInfo = {
  version: string;
  url: string;
  shasum: string;
  dependencies: { [dependency: string]: string };
};

const defaultLockInfo = () => {
  return {
    version: '',
    url: '',
    shasum: '',
    dependencies: {},
  };
};

/*
 * Using two lock trees, one old and one new (see below), helps to remove packages.
 * Lock files are not rewritten by humans, but are dynamically generated by the package manager for dependency management.
 */

/*
 * Lock tree on the "old" side
 * This Lock is treated as read-only in situations other than writing data read from the lock file.
 */
const oldLock: Lock = {};

/*
 * Lock tree on the new one
 * Note that this lock is written directly to the lock file.
 */
const newLock: Lock = {};

/**
 * Store package information on lock
 * If the information does not exist on the lock, create it. Otherwise simply update it.
 */
export const updateOrCreate = (name: string, info: LockInfo) => {
  if (!newLock[name]) {
    newLock[name] = defaultLockInfo();
  }

  newLock[name] = info;
};

/**
 * Get package information by package name + semantic version
 *
 * The data structure of the npm registry is slightly formatted and returned
 *
 * Formatting eliminates the need to change the logic of the `collectDeps` function in the `list` module
 */
export const getItem = (name: string, constraint: string): Manifest | null => {
  const item = oldLock[`${name}@${constraint}`];
  if (!item) return null;

  return {
    [item.version]: {
      dependencies: item.dependencies,
      dist: { shasum: item.shasum, tarball: item.url },
    },
  };
};

/**
 * Write the current contents of newLock as a lock file
 */
export const writeLock = () => {
  fs.writeFileSync(`./${NAME}.yml`, yaml.dump(sortKeys(newLock), { noRefs: true }));
};

/**
 * If there is a lock file, load it into oldLock
 */
export const readLock = () => {
  if (fs.pathExistsSync(`./${NAME}.yml`)) {
    Object.assign(oldLock, yaml.loadAll(fs.readFileSync(`./${NAME}.yml`, 'utf8')));
  }
};
